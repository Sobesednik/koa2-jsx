{"version":3,"sources":["../src/index.jsx"],"names":["writeDoctype","ctx","res","write","writeHtml","type","status","staticNodeStreamRender","WebSite","stream","body","nodeStreamRender","prettyRender","markup","s","makeStore","reducer","actions","View","render","next","store","assignContextActions","Content","Object","keys","forEach","key","fn","args","action","dispatch","config","pretty","r","Store"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,eAAgBC,GAAD,IAASA,IAAIC,GAAJ,CAAQC,KAAR,CAAc,mBAAd,CAA9B;;AAEA,MAAMC,YAAaH,GAAD,IAAS;AACzBA,MAAII,IAAJ,GAAW,MAAX;AACAJ,MAAIK,MAAJ,GAAa,GAAb;AACAN,eAAaC,GAAb;AACD,CAJD;;AAMA,MAAMM,yBAAyB,CAACN,GAAD,EAAMO,OAAN,KAAkB;AAC/CJ,YAAUH,GAAV;AACA,QAAMQ,SAAS,sCAAyBD,OAAzB,CAAf;AACAP,MAAIS,IAAJ,GAAWD,MAAX;AACD,CAJD;;AAKO,MAAME,mBAAmB,CAACV,GAAD,EAAMO,OAAN,KAAkB;AAChDJ,YAAUH,GAAV;AACA,QAAMQ,SAAS,gCAAmBD,OAAnB,CAAf;AACAP,MAAIS,IAAJ,GAAWD,MAAX;AACD,CAJM;AAMP;;;;;;;AAGO,MAAMG,eAAe,CAACX,GAAD,EAAMO,OAAN,KAAkB;AAC5CJ,YAAUH,GAAV;AACA,QAAMY,SAAS,kCAAqBL,OAArB,CAAf;AACA,QAAMM,IAAI,uBAAYD,MAAZ,CAAV;AACAZ,MAAIS,IAAJ,GAAWI,CAAX;AACD,CALM;AAOP;;;;;;;;;;;;AAQA,MAAMC,YAAY,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,MAAzB,KAAoC;AACpD,SAAO,OAAOlB,GAAP,EAAYmB,IAAZ,KAAqB;AAC1B,UAAMC,QAAQ,wBAAYL,OAAZ,CAAd;AACAf,QAAIoB,KAAJ,GAAYA,KAAZ;AACAC,yBAAqBL,OAArB,EAA8BhB,GAA9B,EAAmCoB,KAAnC;AACA,UAAMD,MAAN,CAJ0B,CAM1B;AACA;AACA;;AAEA,QAAI,CAACnB,IAAIsB,OAAT,EAAkB;AAChB;AACD;;AACD,UAAMf,UACJ,6BAAC,oBAAD;AAAU,aAAOa;AAAjB,OACE,6BAAC,IAAD,QACGpB,IAAIsB,OADP,CADF,CADF;;AAOAJ,WAAOlB,GAAP,EAAYO,OAAZ;AACD,GArBD;AAsBD,CAvBD;AAyBA;;;;;;;;;AAOA,MAAMc,uBAAuB,CAACL,OAAD,EAAUhB,GAAV,EAAeoB,KAAf,KAAyB;AACpDG,SAAOC,IAAP,CAAYR,OAAZ,EAAqBS,OAArB,CAA8BC,GAAD,IAAS;AACpC,UAAMC,KAAKX,QAAQU,GAAR,CAAX;;AACA1B,QAAI0B,GAAJ,IAAW,CAAC,GAAGE,IAAJ,KAAa;AACtB,YAAMC,SAASF,GAAG,GAAGC,IAAN,CAAf;AACAR,YAAMU,QAAN,CAAeD,MAAf;AACD,KAHD;AAID,GAND;AAOD,CARD;AAUA;;;;;;;;;AASA;;;;;AAGA,MAAMF,KAAK,CAACI,SAAS,EAAV,KAAiB;AAC1B,QAAM;AACJd,QADI;AAEJF,cAAU,OAAO,EAAP,CAFN;AAGJC,cAAU,EAHN;AAIJE,aAASZ,sBAJL;AAKJ0B,aAAS;AALL,MAMFD,MANJ;AAQA,QAAME,IAAID,SAASrB,YAAT,GAAwBO,MAAlC;AAEA,QAAMgB,QAAQpB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,IAA5B,EAAkCgB,CAAlC,CAAd;AACA,SAAOC,KAAP;AACD,CAbD;;eAeeP,E","sourcesContent":["import { renderToStaticNodeStream, renderToStaticMarkup, renderToNodeStream } from 'react-dom/server'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { prettyPrint } from 'html'\n\nexport { default as wireframe } from './wireframe'\nexport { default as bootstrap } from './bootstrap'\n\nconst writeDoctype = (ctx) => ctx.res.write('<!doctype html>\\n')\n\nconst writeHtml = (ctx) => {\n  ctx.type = 'html'\n  ctx.status = 200\n  writeDoctype(ctx)\n}\n\nconst staticNodeStreamRender = (ctx, WebSite) => {\n  writeHtml(ctx)\n  const stream = renderToStaticNodeStream(WebSite)\n  ctx.body = stream\n}\nexport const nodeStreamRender = (ctx, WebSite) => {\n  writeHtml(ctx)\n  const stream = renderToNodeStream(WebSite)\n  ctx.body = stream\n}\n\n/**\n * Render html with indentation.\n */\nexport const prettyRender = (ctx, WebSite) => {\n  writeHtml(ctx)\n  const markup = renderToStaticMarkup(WebSite)\n  const s = prettyPrint(markup)\n  ctx.body = s\n}\n\n/**\n * A middleware constructor.\n * @param {function} reducer\n * @param {object} actions\n * @param {function} View\n * @param {function} render\n * @returns {Koa.Middleware}\n */\nconst makeStore = (reducer, actions, View, render) => {\n  return async (ctx, next) => {\n    const store = createStore(reducer)\n    ctx.store = store\n    assignContextActions(actions, ctx, store)\n    await next()\n\n    // so instead of giving you a function to render to include in middleware\n    // chain, I just include render as the very last operation, assuming no\n    // implications but there could be e.g., for error page.\n\n    if (!ctx.Content) {\n      return\n    }\n    const WebSite = (\n      <Provider store={store}>\n        <View>\n          {ctx.Content}\n        </View>\n      </Provider>\n    )\n    render(ctx, WebSite)\n  }\n}\n\n/**\n * Convert action creators from `actions` config into action dispatchers in the\n * context.\n * @param {object} actions\n * @param {object} ctx\n * @param {{dispatch:function}} store\n */\nconst assignContextActions = (actions, ctx, store) => {\n  Object.keys(actions).forEach((key) => {\n    const fn = actions[key]\n    ctx[key] = (...args) => {\n      const action = fn(...args)\n      store.dispatch(action)\n    }\n  })\n}\n\n/**\n * @typedef {Object} Config\n * @property {function} View A Redux connected container\n * @property {function} [reducer] A root reducer to create the store\n * @property {Object} [actions] A map of action creators\n * @property {function} [render] An optional render function. Stream rendering\n * is used by default.\n */\n\n/**\n * @param {Config} config\n */\nconst fn = (config = {}) => {\n  const {\n    View,\n    reducer = () => ({}),\n    actions = {},\n    render = staticNodeStreamRender,\n    pretty = false,\n  } = config\n\n  const r = pretty ? prettyRender : render\n\n  const Store = makeStore(reducer, actions, View, r)\n  return Store\n}\n\nexport default fn\n"],"file":"index.js"}